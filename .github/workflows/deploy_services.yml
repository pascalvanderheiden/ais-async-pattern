name: Deploy Services

env:
  RESOURCEGROUP: 'mcmaisd-rg'

  PATH_TO_INFRA_BICEP: './deploy/infra.bicep'
  PATH_TO_INFRA_JSON: './deploy/infra.json' #(this file is produced after bicep file is compiled)
  PATH_TO_INFRA_PARAM: './deploy/infra.parameters.json'

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

  deploy_services:

    runs-on: ubuntu-latest

    steps:

      - uses: actions/checkout@v2
      
      # LOGIN TO AZURE. THE LOGGED IN SESSION IS ACTIVE TILL A LOGOUT ACTION IS CALLED (OR THE JOB FINISHED)
      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # BUILDING BICEP OUTPUTS A JSON ARM TEMPLATE
      - name: build bicep ðŸ’ª
        run: |
          az bicep build --file ${{env.PATH_TO_INFRA_BICEP}}

      # DEPLOY THE SERVICES
      - name: 'create / update azure resources'
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az deployment group create -g '${{ env.RESOURCEGROUP_SHARED }}' --template-file ${{ env.PATH_TO_INFRA_JSON }} --parameters ${{ env.PATH_TO_INFRA_PARAM }}

#       sb_connection_string_out=$(echo $outputs | jq -r .properties.outputs.sb_connection_string.value)
#       cosmosdb_masterKey_out=$(echo $outputs | jq -r .properties.outputs.cosmosdb_masterKey.value)
#       key_vault_name_out=$(echo $outputs | jq -r .properties.outputs.key_vault_name.value)

#       echo sb_connection_string=$sb_connection_string_out >> $GITHUB_ENV
#       echo cosmosdb_masterKey=$cosmosdb_masterKey_out >> $GITHUB_ENV
#       echo key_vault_name=$key_vault_name_out >> $GITHUB_ENV

# # ADD KEYVAULT SECRETS
# - name: "add key vault secrets"
#   uses: azure/CLI@v1
#   with:
#     inlineScript: |
#         SBCONNECTIONSTRING=$(az servicebus namespace authorization-rule keys list -g ${{ env.RESOURCEGROUP }} --namespace-name $SERVICEBUSNS -n $KVSERVICEBUSLABEL --query primaryConnectionString -o tsv)
#COSMOSDBKEY=$(az cosmosdb keys list -n $COSMOSACC -g $RESOURCEGROUP --type keys --query primaryMasterKey -o tsv)
#         az keyvault secret set --vault-name "${{ env.key_vault_name }}" --name "${{ env.KVSERVICEBUSLABEL }}" --value "${{ env.sb_connection_string }}"
#         az keyvault secret set --vault-name "${{ env.key_vault_name }}" --name "${{ env.KVCOSMOSDBLABEL }}" --value "${{ env.cosmosdb_masterKey_out }}"

      - name: logout
        run: |
          az logout